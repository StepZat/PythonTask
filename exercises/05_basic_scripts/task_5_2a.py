# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip_addr = input()
ip, mask = ip_addr.split('/')
oct1,oct2,oct3,oct4 = list(map(int,ip.split('.')))
mask_bytes = "1" * int(mask) + "0" * (32-int(mask))
mask1,mask2,mask3,mask4 = int(mask_bytes[:8],2), int(mask_bytes[8:16],2), int(mask_bytes[16:24],2), int(mask_bytes[24:32],2)
oct1,oct2,oct3,oct4 = oct1 & mask1, oct2 & mask2, oct3 & mask3, oct4 & mask4
print(f'''Network:
{oct1:<8}  {oct2:<8}  {oct3:<8}  {oct4:<8}
{oct1:08b}  {oct2:08b}  {oct3:08b}  {oct4:08b}

Mask
/{mask}
{mask1:<8}  {mask2:<8}  {mask3:<8}  {mask4:<8}
{mask1:08b}  {mask2:<08b}  {mask3:<08b}  {mask4:<08b}''')

